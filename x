// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
};
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var src_beginner_Regex = function() { };
src_beginner_Regex.main = function() {
	var regexp = new EReg("world","");
	console.log(regexp.match("hello world"));
	console.log(regexp.match("hello"));
	var regexp1 = new EReg("world","ig");
	console.log(regexp1.match("HELLO WORLD"));
	var message = "hello world";
	console.log(StringTools.replace(message,"hello","happy"));
	var ereg_r = new RegExp("hello","".split("u").join(""));
	console.log(message.replace(ereg_r,"happy"));
	var message1 = "high to low";
	var ereg_r1 = new RegExp("(high).+?(low)","".split("u").join(""));
	console.log(message1.replace(ereg_r1,"$2 and $1"));
	var getFruits = function(input) {
		var ereg = new EReg("(\\d{1,2})\\s(.+?)(\n|$)","g");
		var list = [];
		while(ereg.match(input)) {
			list.push({ amount : Std.parseInt(ereg.matched(1)), fruit : ereg.matched(2)});
			input = ereg.matchedRight();
		}
		return list;
	};
	var fruits = "1 Apple\n        2 Bananas\n          3 Pears\n          1 Tomato";
	console.log(getFruits(fruits));
};
src_beginner_Regex.main();
})();
